from config import Token
import telebot
from db_reqests import *
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

bot = telebot.TeleBot(Token)


@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, "/room  –ü–æ –∫–æ–º–Ω–∞—Ç–µ —É–∑–Ω–∞—Ç—å –∫—Ç–æ —Ç–∞–º –∂–∏–≤—ë—Ç\n"
                                      "/surname –ü–æ —Ñ–∞–º–∏–ª–∏–∏ —É–∑–Ω–∞—Ç—å –≥–¥–µ –æ–Ω –∂–∏–≤—ë—Ç\n"
                                      "/help –£–∑–Ω–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥")


# –ø–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è –∂–∏—Ç–µ–ª–µ–π –î–æ–º–∞ –°—Ç—É–¥–µ–Ω—Ç–∞!\n'
                                      '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º—Ü–∏–∏ –∏ —É–¥–æ–±–Ω–æ –æ–±—â–∞—Ç—å—Å—è —Å —Å–æ—Å–µ–¥—è–º–∏!'
                                      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã')

    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAJc8V-2w6lq33eMxp9tbsA2ZtBHpH8gAAJ0AAM7YCQUs8te1W3kR_QeBA')


@bot.message_handler(commands=['room'])
def get_room(message):
    next_message = bot.send_message(message.chat.id, '–í –∫–∞–∫–æ–π –∫–æ–º–Ω–∞—Ç–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫—Ç–æ –∂–∏–≤—ë—Ç?')
    bot.register_next_step_handler(next_message, give_name)


def give_name(message):
    room = message.text
    if not room.isdigit():
        next_message = bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ')
        bot.register_next_step_handler(next_message, give_name)
        return

    room = int(room)

    exists, students = who_lives_in_room(room)

    if 100 <= room < 800:  # —É—Å–ª–æ–≤–∏–µ –µ—Å—Ç—å –ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # names = room_names[room]    # –≤–∑—è—Ç—å –≤—Å–µ —Ñ–∏–æ –∫—Ç–æ –∂–∏–≤—ë—Ç –≤ –¥–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ (0 1 2)

        if exists:
            bot.send_message(message.chat.id, '–í –∫–æ–º–Ω–∞—Ç–µ ' + str(room) + ' –∂–∏–≤—É—Ç:')
            for (surname, name, chat_id) in students:
                bot.send_message(message.chat.id, surname + ' ' + name)
        else:
            bot.send_message(message.chat.id, '–ú—ã –Ω–µ –∑–Ω–∞–µ–º –∫—Ç–æ-—Ç–∞–º –∂–∏–≤—ë—Ç üòñ')

    else:
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–π –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üôÑ')


@bot.message_handler(commands=['surname'])
def get_surname(message):
    next_message = bot.send_message(message.chat.id, '–ß—å—ë –º–µ—Å—Ç–æ–ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?\n –§–∞–º–∏–ª–∏—è –ò–º—è\n'
                                                     '–ü–æ–∏—Å–∫ –ø–æ –æ–¥–Ω–æ–π –§–∞–º–∏–ª–∏—è/–ò–º—è:\nsurname=–§–∞–º–∏–ª–∏—è/–ò–º–µ–Ω–∏')
    bot.register_next_step_handler(next_message, give_room)


def give_room(message):
    owner_room = message.text
    # print(owner_room)
    owner_room = owner_room.split(' ')
    if len(owner_room) > 2:
        next_message = bot.send_message(message.chat.id,
                                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–∞–Ω–Ω—ã–µ\n –§–∞–º–∏–ª–∏—è –ò–º—è\n –ü–æ–∏—Å–∫ –ø–æ –æ–¥–Ω–æ–π –§–∞–º–∏–ª–∏—è/–ò–º—è:\n'
                                        'surname=–§–∞–º–∏–ª–∏—è/–ò–º–µ–Ω–∏')
        bot.register_next_step_handler(next_message, give_room)
        return
    surname, name = None, None


    if len(owner_room) == 1:  # –∫—É—á—É –∫–æ—Å—è–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥
        flag_nick = owner_room[0]
        if 'surname=' in flag_nick:
            surname = flag_nick.replace('surname=', '').strip()
        elif 'name=' in flag_nick:
            name = flag_nick.replace('name=', '').strip()
        else:
            next_message = bot.send_message(message.chat.id,
                                            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–∞–Ω–Ω—ã–µ\n –§–∞–º–∏–ª–∏—è –ò–º—è\n –ü–æ–∏—Å–∫ –ø–æ –æ–¥–Ω–æ–π –§–∞–º–∏–ª–∏–∏/–ò–º–µ–Ω–∏:\n'
                                            'surname=–§–∞–º–∏–ª–∏—è/–ò–º–µ–Ω–∏')
            bot.register_next_step_handler(next_message, give_room)
            return
    else:
        surname = owner_room[0]
        name = owner_room[1]

    exist, info_of_person = where_lives_person(surname=surname, name=name)

    if exist:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        for room_, surname_, name_, chat_id in info_of_person:
            bot.send_message(message.chat.id, surname_ + ' ' + name_ + ' : ' + str(room_))   # –¥–æ—Å—Ç–∞—Ç—å –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –∂–∏–ª—å—Ü–æ–≤
    else:
        bot.send_message(message.chat.id, '–≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –Ω–µ –∂–∏–≤—ë—Ç –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏ üôÑ')


@bot.message_handler(commands=['registration'])
def registration(message):
    exist, profile = get_profile(message.chat.id)
    if exist:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å")
        return

    next_message = bot.send_message(message.chat.id, """
    –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ—á–∫–∞—Ö
    –§–∞–º–∏–ª–∏—è 
    –ò–º—è
    –ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã
    """)
    bot.register_next_step_handler(next_message, registration_add_in_bd)


def exception_registration_add_in_bd(message):
    # print('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–∞–Ω–Ω—ã–µ')
    next_message = bot.send_message(message.chat.id, """
        –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        –§–∞–º–∏–ª–∏—è 
        –ò–º—è
        –ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã
        """)
    bot.register_next_step_handler(next_message, registration_add_in_bd)
    return


def registration_add_in_bd(message):
    # print(message.text)
    list_name_room = message.text.split('\n')
    if not (len(list_name_room) == 3):
        exception_registration_add_in_bd(message)
        return

    surname = list_name_room[0]
    name = list_name_room[1]  # –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å
    if not(list_name_room[2].isdigit()):
        exception_registration_add_in_bd(message)
        return

    room = int(list_name_room[2])
    chat_id = message.chat.id
    add_students(surname=surname, name=name, room=room, chat_id=chat_id)

    bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É')


@bot.message_handler(commands=['profile'])
def show_profile(message):
    chat_id = message.chat.id
    exist, profile = get_profile(chat_id)
    if exist:
        profile = profile[0]
        room = profile[0]
        surname = profile[1]
        name = profile[2]
        chat_id = profile[3]

        markup = telebot.types.ReplyKeyboardMarkup(True, True)
        button_surname = telebot.types.KeyboardButton('surname')
        button_name = telebot.types.KeyboardButton('name')
        button_room = telebot.types.KeyboardButton('room')
        button_exit = telebot.types.KeyboardButton('exit')
        markup.row(button_surname, button_name, button_room, button_exit)

        next_message = bot.send_message(message.chat.id, f""" Surname: {surname}\nName: {name}\nRoom: {room}\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ""", reply_markup=markup)
        bot.register_next_step_handler(next_message, change_profile)

    else:
        next_message = bot.send_message(message.chat.id, """–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã""")
        bot.register_next_step_handler(next_message, registration)





data_type = ''

def change_profile(message):

    if message.text in ['surname', 'name', 'room']:
        next_message = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è')
        global data_type
        data_type = message.text
        bot.register_next_step_handler(next_message, change_data_in_profile_bot)



def change_data_in_profile_bot(message):
    global data_type
    print(data_type)
    print(message.text)
    if data_type == 'exit':
        return

    change_data_in_profile(message.chat.id, data_type, message.text)

    markup = telebot.types.ReplyKeyboardMarkup(True, True)
    button_surname = telebot.types.KeyboardButton('surname')
    button_name = telebot.types.KeyboardButton('name')
    button_room = telebot.types.KeyboardButton('room')
    button_exit = telebot.types.KeyboardButton('exit')
    markup.row(button_surname, button_name, button_room, button_exit)

    next_message = bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)
    bot.register_next_step_handler(next_message, change_profile)

@bot.message_handler(commands=['send_mes_to_room'])
def send_message_across_the_room_request(message):
    next_message = bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –∫–æ–º–Ω–∞—Ç–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?')
    bot.register_next_step_handler(next_message, send_message_across_the_room)


request_room = -1

def send_message_across_the_room(message):
    global request_room
    print(message.text)
    if message.text.isdigit():
        request_room = int(message.text)
        next_message = bot.send_message(message.chat.id, f'–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ—Å–ª–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç–µ: {request_room}')
        bot.register_next_step_handler(next_message, send_message_across_the_room_final)
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ')


def send_message_across_the_room_final(message):
    global request_room
    letter = message.text
    exist, persons = who_lives_in_room(request_room)
    if exist:
        persons_chat_id = []
        bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:')
        for person in persons:
            bot.send_message(person[2], letter)
            bot.send_message(message.chat.id, person[0] + ' ' + person[1])
    else:
        bot.send_message(message.chat.id, '–ú—ã –Ω–µ –∑–Ω–∞–µ–º –∫—Ç–æ —Ç–∞–º –∂–∏–≤—ë—Ç :(')


if __name__ == '__main__':
    bot.polling(none_stop=True)


